from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter
from pdfminer.pdfpage import PDFPage
from pdfminer.converter import PDFPageAggregator
from pdfminer.layout import LAParams, LTTextBox, LTTextLine, LTChar, LTFigure
from pdfminer.pdfdocument import PDFDocument
from pdfminer.pdfparser import PDFParser
from pdfminer.pdfpage import PDFPage
from pdfminer.pdfdevice import PDFDevice
from pdfminer.psparser import PSKeyword, PSLiteral

# Function to parse the PDF and extract text with color information
def extract_text_and_color(pdf_path):
    with open(pdf_path, 'rb') as file:
        parser = PDFParser(file)
        document = PDFDocument(parser)
        if not document.is_extractable:
            raise PDFTextExtractionNotAllowed

        rsrcmgr = PDFResourceManager()
        laparams = LAParams()
        device = PDFPageAggregator(rsrcmgr, laparams=laparams)
        interpreter = PDFPageInterpreter(rsrcmgr, device)

        for page in PDFPage.create_pages(document):
            interpreter.process_page(page)
            layout = device.get_result()

            for element in layout:
                if isinstance(element, (LTTextBox, LTTextLine)):
                    for obj in element:
                        if isinstance(obj, LTChar):
                            if obj.graphicstate:
                                stroke_color = obj.graphicstate.sstroke
                                if stroke_color and stroke_color.ncomponents == 3:
                                    if stroke_color.components[2] > 0 and stroke_color.components[1] == 0 and stroke_color.components[0] == 0:
                                        print(f"Text: {obj.get_text().strip()} Color: {stroke_color.components}")

# Example usage
pdf_path = 'path_to_your_pdf.pdf'
extract_text_and_color(pdf_path)





from pdfminer.high_level import extract_pages
from pdfminer.layout import LTTextContainer, LTChar

def is_blue_color(graphicstate):
    """Check if the text color is blue."""
    if graphicstate:
        # Check fill color
        fill_color = graphicstate.get('nonstroking', None)
        if fill_color and len(fill_color) == 3:
            # Assuming RGB color model
            r, g, b = fill_color
            return r == 0 and g == 0 and b > 0
    return False

def extract_blue_text(pdf_path):
    blue_texts = []

    for page_layout in extract_pages(pdf_path):
        for element in page_layout:
            if isinstance(element, LTTextContainer):
                for text_line in element:
                    if isinstance(text_line, LTTextContainer):
                        for char in text_line:
                            if isinstance(char, LTChar):
                                if is_blue_color(char.graphicstate):
                                    blue_texts.append(char.get_text())

    return blue_texts

# Example usage
pdf_path = 'path_to_your_pdf.pdf'
blue_texts = extract_blue_text(pdf_path)
print("Blue texts found in PDF:")
for text in blue_texts:
    print(text)








import fitz  # PyMuPDF

def is_blue_color(color):
    """Check if the color is blue."""
    if color:
        r, g, b = color[:3]
        return r == 0 and g == 0 and b > 0
    return False

def extract_blue_text(pdf_path):
    blue_texts = []

    # Open the PDF file
    document = fitz.open(pdf_path)

    # Iterate through each page
    for page_num in range(len(document)):
        page = document.load_page(page_num)
        blocks = page.get_text("dict")["blocks"]

        for block in blocks:
            for line in block.get("lines", []):
                for span in line.get("spans", []):
                    if is_blue_color(span.get("color")):
                        blue_texts.append(span.get("text"))

    return blue_texts

# Example usage
pdf_path = 'path_to_your_pdf.pdf'
blue_texts = extract_blue_text(pdf_path)
print("Blue texts found in PDF:")
for text in blue_texts:
    print(text)

